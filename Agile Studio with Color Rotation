// ==UserScript==
// @name         Replace All RGB Styles on Agile Studio with Color Rotation
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  Replaces rgb(58, 83, 233) with a rotating set of colors and fixes gradients on agilestudio.pega.com
// @author       Navaneeth Sen
// @match        https://agilestudio.pega.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const OLD_COLOR_RGB = 'rgb(58, 83, 233)';
    const OLD_COLOR_RGB_PATTERN = /rgb\(58,\s*83,\s*233\)/g;
    const OLD_COLOR_RGBA_PATTERN = /rgba\(58,\s*83,\s*233,\s*([\d.]+)\)/g;

    // Array of colors to cycle through
    const COLOR_OPTIONS = [
        'rgb(17, 38, 164)',  // Blue
        'rgb(164, 17, 113)', // Pink/purple
        'rgb(124, 13, 64)',  // Dark red
        'rgb(9, 113, 113)',  // Teal
        'rgb(136, 88, 17)'   // Gold/brown
    ];

    // Get the current color index from localStorage or set to 0 if not found
    let currentColorIndex = parseInt(localStorage.getItem('agileStudioColorIndex') || '0');

    // Get the next color and increment the index
    const NEW_COLOR = COLOR_OPTIONS[currentColorIndex];
    currentColorIndex = (currentColorIndex + 1) % COLOR_OPTIONS.length;

    // Save the next index for the next page load
    localStorage.setItem('agileStudioColorIndex', currentColorIndex.toString());

    // Parse RGB components from the NEW_COLOR
    const rgbMatch = NEW_COLOR.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
    let r = parseInt(rgbMatch[1]);
    let g = parseInt(rgbMatch[2]);
    let b = parseInt(rgbMatch[3]);

    // Create a lighter version for gradients
    const LIGHT_COLOR = `rgb(${Math.min(255, Math.round(r * 1.7))}, ${Math.min(255, Math.round(g * 1.7))}, ${Math.min(255, Math.round(b * 1.7))})`;

    console.log('Agile Studio Color Replacer: Using color', NEW_COLOR, 'with light variant', LIGHT_COLOR);

    // Performance optimization: throttle and debounce
    let isProcessing = false;
    const processedElements = new WeakSet();

    function replaceColorInString(str) {
        if (!str) return str;

        // Replace simple RGB color
        let modified = str.replace(OLD_COLOR_RGB_PATTERN, NEW_COLOR);

        // Replace RGBA color while preserving the alpha value
        modified = modified.replace(OLD_COLOR_RGBA_PATTERN, (match, alpha) => {
            const rgbParts = NEW_COLOR.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
            if (rgbParts) {
                return `rgba(${rgbParts[1]}, ${rgbParts[2]}, ${rgbParts[3]}, ${alpha})`;
            }
            return match;
        });

        return modified;
    }

    // Optimized inline and computed styles replacement
    function replaceInlineAndComputedStyles() {
        // Get all elements but process in batches to avoid blocking
        const allElements = document.querySelectorAll('*');
        const batchSize = 100;

        function processBatch(startIndex) {
            const endIndex = Math.min(startIndex + batchSize, allElements.length);

            for (let i = startIndex; i < endIndex; i++) {
                const el = allElements[i];

                // Skip input elements and contenteditable to avoid typing interference
                if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' ||
                    el.contentEditable === 'true' || el.isContentEditable) {
                    continue;
                }

                // Skip if already processed in this cycle
                if (processedElements.has(el)) {
                    continue;
                }

                const style = getComputedStyle(el);

                // Only check relevant properties that could contain our target color
                const relevantProps = ['background', 'background-image', 'color', 'border-color', 'box-shadow'];

                for (const prop of relevantProps) {
                    const value = style.getPropertyValue(prop);

                    if (value && (value.includes('rgb(58') || value.includes('rgba(58'))) {
                        // Special handling for gradients
                        if (value.includes('linear-gradient') && value.includes('4deg')) {
                            if (prop === 'background' || prop === 'background-image') {
                                el.style[prop] = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                            } else {
                                el.style[prop] = replaceColorInString(value);
                            }
                        } else {
                            el.style[prop] = replaceColorInString(value);
                        }
                    }
                }

                processedElements.add(el);
            }

            // Continue with next batch if there are more elements
            if (endIndex < allElements.length) {
                requestAnimationFrame(() => processBatch(endIndex));
            }
        }

        // Start processing first batch
        processBatch(0);
    }

    function replaceInCSSRules() {
        for (const sheet of document.styleSheets) {
            let rules;
            try {
                rules = sheet.cssRules;
            } catch (e) {
                continue;
            }
            if (!rules) continue;

            for (let i = 0; i < rules.length; i++) {
                const rule = rules[i];
                if (rule.style) {
                    for (let j = 0; j < rule.style.length; j++) {
                        const prop = rule.style[j];
                        const value = rule.style.getPropertyValue(prop);

                        if (value.includes('rgb(58') || value.includes('rgba(58')) {
                            if (value.includes('linear-gradient') && value.includes('4deg')) {
                                if (prop === 'background' || prop === 'background-image') {
                                    rule.style.setProperty(
                                        prop,
                                        `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`,
                                        rule.style.getPropertyPriority(prop)
                                    );
                                } else {
                                    rule.style.setProperty(
                                        prop,
                                        replaceColorInString(value),
                                        rule.style.getPropertyPriority(prop)
                                    );
                                }
                            } else {
                                rule.style.setProperty(
                                    prop,
                                    replaceColorInString(value),
                                    rule.style.getPropertyPriority(prop)
                                );
                            }
                        }
                    }
                }
            }
        }
    }

    // Target specific elements (kept from original)
    function targetSpecificElements() {
        // Look for header elements
        const headers = document.querySelectorAll('header[data-testid=":case-view:header"]');
        headers.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Look for articles with linear gradient backgrounds
        const articles = document.querySelectorAll('article[style*="linear-gradient"]');
        articles.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Target by inline style content for gradients
        const elementsWithGradient = document.querySelectorAll('[style*="linear-gradient(4deg"]');
        elementsWithGradient.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Target elements with any form of the rgb(58, 83, 233) color
        const elementsWithColor = document.querySelectorAll('[style*="rgb(58"]');
        elementsWithColor.forEach(el => {
            if (el.style.cssText) {
                const newCssText = replaceColorInString(el.style.cssText);
                el.style.cssText = newCssText;
            }
        });
    }

    // Throttled main processing function
    function applyAllReplacements() {
        if (isProcessing) return;

        isProcessing = true;

        // Clear processed elements cache periodically
        if (Math.random() < 0.1) { // 10% chance to clear cache
            processedElements.clear?.() || Object.setPrototypeOf(processedElements, WeakSet.prototype);
        }

        // Use requestAnimationFrame to avoid blocking
        requestAnimationFrame(() => {
            try {
                replaceInCSSRules();
                targetSpecificElements();
                replaceInlineAndComputedStyles(); // This now processes in batches
            } finally {
                isProcessing = false;
            }
        });
    }

    // Optimized mutation observer with debouncing
    let mutationTimeout;
    const observer = new MutationObserver(mutations => {
        let shouldProcess = false;

        mutations.forEach(mutation => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                // Check if any added nodes are elements (not text nodes)
                for (const node of mutation.addedNodes) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        shouldProcess = true;
                        break;
                    }
                }
            }
        });

        if (shouldProcess) {
            // Debounce: clear previous timeout and set new one
            clearTimeout(mutationTimeout);
            mutationTimeout = setTimeout(() => {
                applyAllReplacements();
            }, 100); // Wait 100ms before processing
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // Run on initial load
    window.addEventListener('load', applyAllReplacements);

    // Also run immediately in case some elements are already loaded
    applyAllReplacements();

    // Reduced frequency polling - only 3 times instead of 10
    setTimeout(applyAllReplacements, 1000);
    setTimeout(applyAllReplacements, 3000);
    setTimeout(applyAllReplacements, 8000);
})();
