// ==UserScript==
// @name         Replace All RGB Styles on Agile Studio with Color Rotation
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Replaces rgb(58, 83, 233) with a rotating set of colors and fixes gradients on agilestudio.pega.com
// @author       Navaneeth Sen
// @match        https://agilestudio.pega.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const OLD_COLOR = 'rgb(58, 83, 233)';
    const OLD_GRADIENT_SECOND_COLOR = 'rgb(0, 67, 200)';

    // Array of colors to cycle through
    const COLOR_OPTIONS = [
        'rgb(17, 38, 164)',  // Blue
        'rgb(164, 17, 113)', // Pink/purple
        'rgb(124, 13, 64)',  // Dark red
        'rgb(9, 113, 113)',  // Teal
        'rgb(136, 88, 17)'   // Gold/brown
    ];

    // Get the current color index from localStorage or set to 0 if not found
    let currentColorIndex = parseInt(localStorage.getItem('agileStudioColorIndex') || '0');

    // Get the next color and increment the index
    const NEW_COLOR = COLOR_OPTIONS[currentColorIndex];
    currentColorIndex = (currentColorIndex + 1) % COLOR_OPTIONS.length;

    // Save the next index for the next page load
    localStorage.setItem('agileStudioColorIndex', currentColorIndex.toString());

    // Parse RGB components from the NEW_COLOR
    const rgbMatch = NEW_COLOR.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
    let r = parseInt(rgbMatch[1]);
    let g = parseInt(rgbMatch[2]);
    let b = parseInt(rgbMatch[3]);

    // Create a lighter version for gradients (increase each RGB component by 60%, capped at 255)
    const LIGHT_COLOR = `rgb(${Math.min(255, Math.round(r * 1.6))}, ${Math.min(255, Math.round(g * 1.6))}, ${Math.min(255, Math.round(b * 1.6))})`;

    // Log the colors being used (for debugging)
    console.log('Agile Studio Color Replacer: Using color', NEW_COLOR, 'with light variant', LIGHT_COLOR);

    // To store the classes we've found that have gradients we want to replace
    let gradientClassesFound = new Set();

    function replaceColorInString(str) {
        return str.replaceAll(OLD_COLOR, NEW_COLOR);
    }

    function replaceInlineAndComputedStyles() {
        const allElements = document.querySelectorAll('*');
        allElements.forEach(el => {
            const style = getComputedStyle(el);
            // Direct color properties
            if (style.color === OLD_COLOR) el.style.color = NEW_COLOR;
            if (style.backgroundColor === OLD_COLOR) el.style.backgroundColor = NEW_COLOR;

            // Check for any type of linear gradient we want to replace
            const backgroundImage = style.backgroundImage || '';
            if (backgroundImage.includes('linear-gradient')) {
                // If it has our main old color
                if (backgroundImage.includes(OLD_COLOR)) {
                    el.style.backgroundImage = replaceColorInString(backgroundImage);
                }

                // If it's specifically the 4deg gradient pattern with old second color
                if (backgroundImage.includes('4deg') && backgroundImage.includes(OLD_GRADIENT_SECOND_COLOR)) {
                    el.style.backgroundImage = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                }

                // Look for any element that has a 4deg linear gradient (like the article example)
                if (backgroundImage.includes('4deg') && backgroundImage.includes('linear-gradient')) {
                    // Extract the two colors from the gradient if possible
                    const colorMatch = backgroundImage.match(/linear-gradient\(4deg,\s*rgb\([^)]+\)\s*50%,\s*rgb\([^)]+\)\s*100%\)/);
                    if (colorMatch) {
                        el.style.backgroundImage = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                    }
                }
            }

            // Also check the background property
            const background = style.background || '';
            if (background.includes('linear-gradient')) {
                // Same checks as above
                if (background.includes(OLD_COLOR)) {
                    el.style.background = replaceColorInString(background);
                }

                if (background.includes('4deg') && background.includes(OLD_GRADIENT_SECOND_COLOR)) {
                    el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                }

                if (background.includes('4deg') && background.includes('linear-gradient')) {
                    const colorMatch = background.match(/linear-gradient\(4deg,\s*rgb\([^)]+\)\s*50%,\s*rgb\([^)]+\)\s*100%\)/);
                    if (colorMatch) {
                        el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                    }
                }
            }
        });
    }

    function replaceInCSSRules() {
        for (const sheet of document.styleSheets) {
            let rules;
            try {
                rules = sheet.cssRules;
            } catch (e) {
                // Likely a cross-origin stylesheet â€“ skip
                continue;
            }
            if (!rules) continue;
            for (let i = 0; i < rules.length; i++) {
                const rule = rules[i];
                if (rule.style) {
                    for (let j = 0; j < rule.style.length; j++) {
                        const prop = rule.style[j];
                        const value = rule.style.getPropertyValue(prop);

                        if (value.includes(OLD_COLOR)) {
                            const newValue = replaceColorInString(value);
                            rule.style.setProperty(prop, newValue, rule.style.getPropertyPriority(prop));
                        }

                        // Also replace gradients with the second color
                        if (value.includes('linear-gradient') && value.includes('4deg') &&
                            (value.includes(OLD_GRADIENT_SECOND_COLOR))) {
                            rule.style.setProperty(
                                prop,
                                `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`,
                                rule.style.getPropertyPriority(prop)
                            );
                        }
                    }
                }
            }
        }
    }

    // Find classes with any gradient that we want to replace
    function findClassesWithGradient() {
        // Get all stylesheet rules
        const allRules = [];
        for (const sheet of document.styleSheets) {
            try {
                for (const rule of sheet.cssRules || []) {
                    allRules.push(rule);
                }
            } catch (e) {
                // Skip cross-origin sheets
                continue;
            }
        }

        // Look for style rules with linear gradients containing either old color
        allRules.forEach(rule => {
            if (rule.type === CSSRule.STYLE_RULE) {
                const selectorText = rule.selectorText;
                if (!selectorText) return;

                // Check background and background-image properties
                const background = rule.style.background || '';
                const backgroundImage = rule.style.backgroundImage || '';

                const hasTargetGradient =
                    // Either has our main old color
                    ((background.includes('linear-gradient') && background.includes(OLD_COLOR)) ||
                    (backgroundImage.includes('linear-gradient') && backgroundImage.includes(OLD_COLOR))) ||
                    // Or has the second color in a 4deg gradient
                    ((background.includes('linear-gradient') && background.includes('4deg') && background.includes(OLD_GRADIENT_SECOND_COLOR)) ||
                    (backgroundImage.includes('linear-gradient') && backgroundImage.includes('4deg') && backgroundImage.includes(OLD_GRADIENT_SECOND_COLOR))) ||
                    // Or just any 4deg gradient
                    ((background.includes('linear-gradient') && background.includes('4deg')) ||
                    (backgroundImage.includes('linear-gradient') && backgroundImage.includes('4deg')));

                if (hasTargetGradient) {
                    // Extract class names from the selector
                    const classMatches = selectorText.match(/\.[a-zA-Z0-9_-]+/g);
                    if (classMatches) {
                        classMatches.forEach(className => {
                            // Remove the dot at the beginning
                            const cls = className.substring(1);
                            gradientClassesFound.add(cls);
                        });
                    }
                }
            }
        });

        console.log('Found classes with gradients:', Array.from(gradientClassesFound));
    }

    // Apply new gradient to elements with a specific class
    function applyGradientToClass(className) {
        if (!className) return;

        const elements = document.querySelectorAll('.' + className);
        elements.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });
    }

    // Apply gradients to all classes with gradients
    function applyGradientToAllFoundClasses() {
        gradientClassesFound.forEach(className => {
            applyGradientToClass(className);
        });
    }

    // Also target specific element types
    function targetSpecificElements() {
        // Look for header elements
        const headers = document.querySelectorAll('header[data-testid=":case-view:header"]');
        headers.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Look for articles with linear gradient backgrounds
        const articles = document.querySelectorAll('article[style*="linear-gradient"]');
        articles.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Also target by inline style content
        const elementsWithGradient = document.querySelectorAll('[style*="linear-gradient(4deg"]');
        elementsWithGradient.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });
    }

    function applyAllReplacements() {
        replaceInlineAndComputedStyles();
        replaceInCSSRules();

        // Find classes with gradients if we haven't done so yet
        if (gradientClassesFound.size === 0) {
            findClassesWithGradient();
        }

        // Apply to all gradient classes we've found
        applyGradientToAllFoundClasses();

        // Also check specific elements by type or attributes
        targetSpecificElements();
    }

    // Run on initial load
    window.addEventListener('load', applyAllReplacements);

    // Also run immediately in case some elements are already loaded
    applyAllReplacements();

    // Run every 500ms for the first 5 seconds to catch dynamically loaded elements
    for (let i = 1; i <= 10; i++) {
        setTimeout(applyAllReplacements, i * 500);
    }

    // Watch for dynamic DOM changes
    const observer = new MutationObserver(mutations => {
        // Check if we need to apply styling
        let shouldApply = false;

        // Look for added nodes that might be relevant
        mutations.forEach(mutation => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                shouldApply = true;
            }
        });

        if (shouldApply) {
            applyAllReplacements();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
})();
