// ==UserScript==
// @name         Replace All RGB Styles on Agile Studio with Color Rotation
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Replaces rgb(58, 83, 233) with a rotating set of colors and fixes gradients on agilestudio.pega.com
// @author       Navaneeth Sen
// @match        https://agilestudio.pega.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const OLD_COLOR_RGB = 'rgb(58, 83, 233)';
    const OLD_COLOR_RGB_PATTERN = /rgb\(58,\s*83,\s*233\)/g;
    const OLD_COLOR_RGBA_PATTERN = /rgba\(58,\s*83,\s*233,\s*([\d.]+)\)/g;
    const OLD_GRADIENT_SECOND_COLOR = 'rgb(0, 67, 200)';

    // Array of colors to cycle through
    const COLOR_OPTIONS = [
        'rgb(17, 38, 164)',  // Blue
        'rgb(164, 17, 113)', // Pink/purple
        'rgb(124, 13, 64)',  // Dark red
        'rgb(9, 113, 113)',  // Teal
        'rgb(136, 88, 17)'   // Gold/brown
    ];

    // Get the current color index from localStorage or set to 0 if not found
    let currentColorIndex = parseInt(localStorage.getItem('agileStudioColorIndex') || '0');

    // Get the next color and increment the index
    const NEW_COLOR = COLOR_OPTIONS[currentColorIndex];
    currentColorIndex = (currentColorIndex + 1) % COLOR_OPTIONS.length;

    // Save the next index for the next page load
    localStorage.setItem('agileStudioColorIndex', currentColorIndex.toString());

    // Parse RGB components from the NEW_COLOR
    const rgbMatch = NEW_COLOR.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
    let r = parseInt(rgbMatch[1]);
    let g = parseInt(rgbMatch[2]);
    let b = parseInt(rgbMatch[3]);

    // Create a lighter version for gradients (increase each RGB component by 70%, capped at 255)
    const LIGHT_COLOR = `rgb(${Math.min(255, Math.round(r * 1.7))}, ${Math.min(255, Math.round(g * 1.7))}, ${Math.min(255, Math.round(b * 1.7))})`;

    // Log the colors being used (for debugging)
    console.log('Agile Studio Color Replacer: Using color', NEW_COLOR, 'with light variant', LIGHT_COLOR);

    // To store the classes we've found that have gradients we want to replace
    let gradientClassesFound = new Set();

    function replaceColorInString(str) {
        if (!str) return str;

        // Replace simple RGB color
        let modified = str.replace(OLD_COLOR_RGB_PATTERN, NEW_COLOR);

        // Replace RGBA color while preserving the alpha value
        modified = modified.replace(OLD_COLOR_RGBA_PATTERN, (match, alpha) => {
            // Extract r, g, b from NEW_COLOR
            const rgbParts = NEW_COLOR.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
            if (rgbParts) {
                return `rgba(${rgbParts[1]}, ${rgbParts[2]}, ${rgbParts[3]}, ${alpha})`;
            }
            return match; // Fallback if NEW_COLOR is in an unexpected format
        });

        return modified;
    }

    function replaceInlineAndComputedStyles() {
        const allElements = document.querySelectorAll('*');
        allElements.forEach(el => {
            const style = getComputedStyle(el);

            // Go through all style properties
            for (const prop of style) {
                const value = style.getPropertyValue(prop);

                // Check if this property has our target color in any form
                if (value.includes('rgb(58') || value.includes('rgba(58')) {
                    // Special handling for gradients
                    if (value.includes('linear-gradient') && value.includes('4deg')) {
                        if (prop === 'background' || prop === 'backgroundImage') {
                            el.style[prop] = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                        } else {
                            el.style[prop] = replaceColorInString(value);
                        }
                    } else {
                        // For non-gradient properties, just replace the color
                        el.style[prop] = replaceColorInString(value);
                    }
                }
            }
        });
    }

    function replaceInCSSRules() {
        for (const sheet of document.styleSheets) {
            let rules;
            try {
                rules = sheet.cssRules;
            } catch (e) {
                // Likely a cross-origin stylesheet â€“ skip
                continue;
            }
            if (!rules) continue;
            for (let i = 0; i < rules.length; i++) {
                const rule = rules[i];
                if (rule.style) {
                    for (let j = 0; j < rule.style.length; j++) {
                        const prop = rule.style[j];
                        const value = rule.style.getPropertyValue(prop);

                        // Check if this property has our target color in any form
                        if (value.includes('rgb(58') || value.includes('rgba(58')) {
                            // Special handling for gradients
                            if (value.includes('linear-gradient') && value.includes('4deg')) {
                                if (prop === 'background' || prop === 'background-image') {
                                    rule.style.setProperty(
                                        prop,
                                        `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`,
                                        rule.style.getPropertyPriority(prop)
                                    );
                                } else {
                                    rule.style.setProperty(
                                        prop,
                                        replaceColorInString(value),
                                        rule.style.getPropertyPriority(prop)
                                    );
                                }
                            } else {
                                // For non-gradient properties, just replace the color
                                rule.style.setProperty(
                                    prop,
                                    replaceColorInString(value),
                                    rule.style.getPropertyPriority(prop)
                                );
                            }
                        }
                    }
                }
            }
        }
    }

    // Find classes with any color or gradient that we want to replace
    function findClassesWithTargetColors() {
        // Get all stylesheet rules
        const allRules = [];
        for (const sheet of document.styleSheets) {
            try {
                for (const rule of sheet.cssRules || []) {
                    allRules.push(rule);
                }
            } catch (e) {
                // Skip cross-origin sheets
                continue;
            }
        }

        // Look for style rules with our target colors
        allRules.forEach(rule => {
            if (rule.type === CSSRule.STYLE_RULE) {
                const selectorText = rule.selectorText;
                if (!selectorText) return;

                // Check if any style property contains our target color
                let hasTargetColor = false;
                for (let i = 0; i < rule.style.length; i++) {
                    const prop = rule.style[i];
                    const value = rule.style.getPropertyValue(prop);

                    if (value.includes('rgb(58') || value.includes('rgba(58')) {
                        hasTargetColor = true;
                        break;
                    }
                }

                if (hasTargetColor) {
                    // Extract class names from the selector
                    const classMatches = selectorText.match(/\.[a-zA-Z0-9_-]+/g);
                    if (classMatches) {
                        classMatches.forEach(className => {
                            // Remove the dot at the beginning
                            const cls = className.substring(1);
                            gradientClassesFound.add(cls);
                        });
                    }
                }
            }
        });

        console.log('Found classes with target colors:', Array.from(gradientClassesFound));
    }

    // Apply new styles to elements with a specific class
    function applyStylesToClass(className) {
        if (!className) return;

        const elements = document.querySelectorAll('.' + className);
        elements.forEach(el => {
            // Get computed style and check for our target properties
            const style = getComputedStyle(el);

            // Check background and gradient properties specifically
            if ((style.background && (style.background.includes('rgb(58') || style.background.includes('rgba(58'))) ||
                (style.backgroundImage && (style.backgroundImage.includes('rgb(58') || style.backgroundImage.includes('rgba(58')))) {

                // If it's a 4deg gradient, apply our special gradient
                if ((style.background && style.background.includes('4deg')) ||
                    (style.backgroundImage && style.backgroundImage.includes('4deg'))) {
                    el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
                } else {
                    // Otherwise just replace the color
                    if (style.background.includes('rgb(58') || style.background.includes('rgba(58')) {
                        el.style.background = replaceColorInString(style.background);
                    }
                    if (style.backgroundImage.includes('rgb(58') || style.backgroundImage.includes('rgba(58')) {
                        el.style.backgroundImage = replaceColorInString(style.backgroundImage);
                    }
                }
            }

            // Check for color property
            if (style.color && (style.color.includes('rgb(58') || style.color.includes('rgba(58'))) {
                el.style.color = replaceColorInString(style.color);
            }
        });
    }

    // Apply styles to all found classes
    function applyStylesToAllFoundClasses() {
        gradientClassesFound.forEach(className => {
            applyStylesToClass(className);
        });
    }

    // Also target specific element types
    function targetSpecificElements() {
        // Look for header elements
        const headers = document.querySelectorAll('header[data-testid=":case-view:header"]');
        headers.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Look for articles with linear gradient backgrounds
        const articles = document.querySelectorAll('article[style*="linear-gradient"]');
        articles.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Also target by inline style content for gradients
        const elementsWithGradient = document.querySelectorAll('[style*="linear-gradient(4deg"]');
        elementsWithGradient.forEach(el => {
            el.style.background = `linear-gradient(4deg, ${NEW_COLOR} 50%, ${LIGHT_COLOR} 100%)`;
        });

        // Target elements with any form of the rgb(58, 83, 233) color
        const elementsWithColor = document.querySelectorAll('[style*="rgb(58"]');
        elementsWithColor.forEach(el => {
            // For each element, check its inline style string and replace color
            if (el.style.cssText) {
                const newCssText = replaceColorInString(el.style.cssText);
                el.style.cssText = newCssText;
            }
        });
    }

    function applyAllReplacements() {
        replaceInlineAndComputedStyles();
        replaceInCSSRules();

        // Find classes with target colors if we haven't done so yet
        if (gradientClassesFound.size === 0) {
            findClassesWithTargetColors();
        }

        // Apply to all found classes
        applyStylesToAllFoundClasses();

        // Also check specific elements by type or attributes
        targetSpecificElements();
    }

    // Run on initial load
    window.addEventListener('load', applyAllReplacements);

    // Also run immediately in case some elements are already loaded
    applyAllReplacements();

    // Run every 500ms for the first 5 seconds to catch dynamically loaded elements
    for (let i = 1; i <= 10; i++) {
        setTimeout(applyAllReplacements, i * 500);
    }

    // Watch for dynamic DOM changes
    const observer = new MutationObserver(mutations => {
        // Check if we need to apply styling
        let shouldApply = false;

        // Look for added nodes that might be relevant
        mutations.forEach(mutation => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                shouldApply = true;
            }
        });

        if (shouldApply) {
            applyAllReplacements();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
})();
